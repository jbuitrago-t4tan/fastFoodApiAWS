# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: fastfoodapi
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  tableNameMenu: 'FastFoodMenuTable_${self:provider.stage}'
  tableNameTicket: 'FastFoodTicketTable_${self:provider.stage}'
  dynamodb:
    start:
      migrate: true
    stages:
      - ${self:provider.stage}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

plugins:
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221  
# you can overwrite defaults here
  stage: dev
  region: us-east-1
  apiName: '${self:provider.stage}-fastFoodApi'

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["FastFoodMenu", "Arn" ] }
        - { "Fn::GetAtt": ["FastFoodTicket", "Arn" ] }
# you can define service wide environment variables here
  environment:
    MENU_TABLE: ${self:custom.tableNameMenu}
    TICKET_TABLE: ${self:custom.tableNameTicket}


# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  app:
    handler: handler.fastFoodApi
    name: 'lambdaFastFood-${self:provider.stage}'
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http: ANY api/fastfood/menu
      - http: ANY api/fastfood/ticket
      - http: ANY api/fastfood/ticket/{proxy+}
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    FastFoodMenu:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: menuId
            AttributeType: S
        KeySchema:
          -
            AttributeName: menuId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameMenu}
    FastFoodTicket:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: ccClient
            AttributeType: S
        KeySchema:
          -
            AttributeName: ccClient
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNameTicket}
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
